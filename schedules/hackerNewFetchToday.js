import cron from "node-cron";
import axios from "axios";
import { PrismaClient } from "@prisma/client";
import puppeteer from "puppeteer";
import path from "path";
import dotenv from "dotenv";
import fs from "fs/promises";
dotenv.config();

const prisma = new PrismaClient();
export const hackerNewFetchToday = async () => {
  //every 1 minitue
  cron.schedule("*/ * * * *", async () => {
//   cron.schedule("0 0 * * *", async () => {
    try {
        const browser = await puppeteer.launch();
        const page = await browser.newPage();
    
        // ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
        await page.goto('https://thehackernews.com/');
    
        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
        await page.waitForTimeout(5000);
    
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å element ‡∏ó‡∏µ‡πà‡∏°‡∏µ class "h-datetime"
        const dateTimeElement = await page.$('.h-datetime');
        const dateTimeText = await (dateTimeElement ? dateTimeElement.evaluate(node => node.innerText) : '');
        console.log("üöÄ ~ file: hackerNewFetchToday.js:28 ~ //cron.schedule ~ dateTimeText:", dateTimeText)
    
        // ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const currentDate = new Date();
        const currentDateTime = currentDate.toDateString(); // ‡∏ï‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å
        console.log("üöÄ ~ file: hackerNewFetchToday.js:32 ~ //cron.schedule ~ currentDateTime:", currentDateTime)
    
        // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
        if (dateTimeText === currentDateTime) {
          console.log('‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô');
        } else {
          console.log('‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô');
        }
    
        await browser.close();
      } catch (error) {
        console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
      }

  });
};