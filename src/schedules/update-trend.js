import axios from 'axios';
import cheerio from 'cheerio';
import cron from 'node-cron';
import { v4 as uuidv4 } from 'uuid';
import fs from 'fs';
import { PrismaClient } from "@prisma/client";

// URL ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
const url = 'https://thehackernews.com/';

const prisma = new PrismaClient();

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥ HTTP request ‡∏î‡πâ‡∏ß‡∏¢ Axios
async function fetchData(url) {
  try {
    const response = await axios.get(url);
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ request ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (response.status === 200) {
      return response.data;
    }
  } catch (error) {
    throw new Error('Error fetching data:', error);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ Cherrio ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å HTML
function parseHTML(html) {
  const $ = cheerio.load(html);

  // ‡∏•‡∏ö elements ‡∏ó‡∏µ‡πà‡∏°‡∏µ class="header clear"
  $('.header.clear').remove();

  // ‡∏•‡∏ö elements ‡∏ó‡∏µ‡πà‡∏°‡∏µ class="left-box"
  $('.left-box').remove();

  // ‡∏•‡∏ö elements ‡∏ó‡∏µ‡πà‡∏°‡∏µ class="below-post-box cf"
  $('.below-post-box.cf').remove();

  // ‡∏•‡∏ö elements ‡∏ó‡∏µ‡πà‡∏°‡∏µ class="footer-stuff clear cf"
  $('.footer-stuff.clear.cf').remove();

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å pop-title
  const titles = [];
  $('.pop-title').each((index, element) => {
    titles.push($(element).text());
  });


  console.log("üöÄ ~ parseHTML ~ titles:", titles)
  // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ object ‡∏ó‡∏µ‡πà‡∏°‡∏µ cleanedHTML ‡πÅ‡∏•‡∏∞ titles
  return { cleanedHTML: $.html(), titles };
  
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á news ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á trend_new
async function searchAndSetTrending(titles) {
  try {
    for (const title of titles) {
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á news
      const existingNews = await prisma.news.findFirst({
        where: {
          title: title,
        },
      });

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á news
      if (existingNews) {
        // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á news ‡πÄ‡∏õ‡πá‡∏ô Trending News
        await prisma.news.update({
          where: {
            id: existingNews.id,
          },
          data: {
            trend_new: 'Trending News',
          },
        });

        console.log(`News "${title}" is now marked as Trending News in the database.`);
      }
    }
  } catch (error) {
    console.error('Error searching and updating:', error);
  }
}


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï trend_new
async function searchAndResetTrending(titles) {
  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ trend_new ‡πÄ‡∏õ‡πá‡∏ô "Trending News"
    const trendingNews = await prisma.news.findMany({
      where: {
        trend_new: 'Trending News',
      },
    });

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ trend_new ‡πÄ‡∏õ‡πá‡∏ô "Trending News"
    if (trendingNews.length > 0) {
      for (const news of trendingNews) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡πà‡∏≤‡∏ß‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô titles ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const isTitleInTitles = titles.includes(news.title);

        // ‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô titles ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≤
        if (!isTitleInTitles) {
          // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô "Normal"
          await prisma.news.update({
            where: {
              id: news.id,
            },
            data: {
              trend_new: 'Normal',
            },
          });

          console.log(`News "${news.title}" is now marked as Normal.`);
        }
      }
    }
  } catch (error) {
    console.error('Error searching and resetting Trending News:', error);
  }
}


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
export async function fetchDataAndSave() {
  try {
    const htmlData = await fetchData(url);
    const { cleanedHTML, titles } = parseHTML(htmlData);
     // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Trending News ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á
     await searchAndResetTrending(titles);

    await searchAndSetTrending(titles);
    console.log('Data saved to the database.');
  } catch (error) {
    console.error(error.message);
  }
}

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ node-cron ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
cron.schedule('* * * * *', fetchDataAndSave);